net {
  type = mainnet
}

storage {
  // Directory for storing persistent data
  db.version = 2,
  db.engine = "LEVELDB",
  db.directory = "database",
  index.directory = "index",
  
  // This configuration item is only for SolidityNode.
  // Turn off the index is "off", else "on".
  // Turning off the index will significantly improve the performance of the SolidityNode sync block.
  // You can turn off the index if you don't use the two interfaces getTransactionsToThis and getTransactionsFromThis.
  index.switch = "off",
  
  // This configuration item is used to database write strategy.
  // Synchronous writing is "true", else Asynchronous writing is "false".
  // Asynchronous writing significantly improves the performance of the FullNode sync block.
  // 1. If asynchronous, the write will be flushed from the operating system buffer cache.
  //    the machine crashes, some recent writes may be lost. Note that if it is just the process that
  //    crashes (i.e., the machine does not reboot), no writes will be lost;
  // 2. If synchronous, writes will be flush into leveldb directly.
  //     No writes will be lost when machine crashes, but it is slow.
  db.sync = false,
  
  // This configuration item controls the transaction result be put into transactionHistory database.
  // Turn off the switch is "off", else "on".
  // Turning off the switch, transaction result will not be put into transactionHistory database;
  // You can turn off the switch if you don't use the interface getransactioninfobyid.
  transHistory.switch = "on",
  

  // You can custom these 14 databases' configs:

  // account, account-index, asset-issue, block, block-index,
  // block_KDB, peers, properties, recent-block, trans,
  // utxo, votes, witness, witness_schedule.

  // Otherwise, db configs will remain defualt and data will be stored in
  // the path of "output-directory" or which is set by "-d" ("--output-directory").

  // Attention: name is a required field that must be set !!!
  properties = [
//    {
//      name = "account",
//      path = "storage_directory_test",
//      createIfMissing = true,
//      paranoidChecks = true,
//      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
//    {
//      name = "account-index",
//      path = "storage_directory_test",
//      createIfMissing = true,
//      paranoidChecks = true,
//      verifyChecksums = true,
    //      compressionType = 1,        // compressed with snappy
    //      blockSize = 4096,           // 4  KB =         4 * 1024 B
    //      writeBufferSize = 10485760, // 10 MB = 10 * 1024 * 1024 B
    //      cacheSize = 10485760,       // 10 MB = 10 * 1024 * 1024 B
    //      maxOpenFiles = 100
    //    },
  ]

}

node.discovery = {
  enable = true
  persist = true
  bind.ip = ""
  external.ip = null
}

node.backup {
  port = 10001
  priority = 8
  members = [
  ]
}

node {
  // trust node for solidity node
  // trustNode = "ip:port"
  trustNode = "127.0.0.1:50051"

  // expose extension api to public or not
  walletExtensionApi = true

  listen.port = 18888

  connection.timeout = 2

  tcpNettyWorkThreadNum = 0

  udpNettyWorkThreadNum = 1

  // Number of validate sign thread, default availableProcessors / 2
  // validateSignThreadNum = 16

  connectFactor = {{.ConnectFactor}}
  activeConnectFactor = {{.ActiveConnectFactor}}

  maxActiveNodes = 30

  maxActiveNodesWithSameIp = 2

  minParticipationRate = {{.MinParticipationRate}}
  
  maxHttpConnectNumber = 50

  // check the peer data transfer ,disconnect factor
  disconnectNumberFactor = 0.4
  maxConnectNumberFactor = 0.8
  maxHttpConnectNumber = 50
  receiveTcpMinDataLength = 2048
  isOpenFullTcpDisconnect = true

  p2p {
    version = {{.P2PVersion}} // 11111: mainnet; 20180622: testnet
  }

  active = [
    // Active establish connection in any case
    // Sample entries:
    // "ip:port",
    // "ip:port"
  ]

  passive = [
    // Passive accept connection in any case
    // Sample entries:
    // "ip:port",
    // "ip:port"
  ]
  
  fastForward = [
    "100.26.245.209:18888",
    "15.188.6.125:18888"
  ]

  http {
    fullNodePort = {{.FullNodePort}}
    solidityPort = {{.SolNodePort}}
  }

  rpc {
    port = 50051
    solidityPort = 50061
    // Number of gRPC thread, default availableProcessors / 2
    // thread = 16

    // The maximum number of concurrent calls permitted for each incoming connection
    // maxConcurrentCallsPerConnection =

    // The HTTP/2 flow control window, default 1MB
    // flowControlWindow =

    // Connection being idle for longer than which will be gracefully terminated
    maxConnectionIdleInMillis = 60000

    // Connection lasting longer than which will be gracefully terminated
    // maxConnectionAgeInMillis =

    // The maximum message size allowed to be received on the server, default 4MB
    // maxMessageSize =

    // The maximum size of header list allowed to be received, default 8192
    // maxHeaderListSize =
  }
  blockProducedTimeOut = 50
  // number of solidity thread in the FullNode.
  // If accessing solidity rpc and http interface timeout, could increase the number of threads,
  // The default value is the number of cpu cores of the machine.
  //solidity.threads = 8
}



seed.node = {
  // List of the seed nodes
  // Seed nodes are stable full nodes
  // example:
  // ip.list = [
  //   "ip:port",
  //   "ip:port"
  // ]
  ip.list = {{.SeedIpList}}
}

genesis.block = {{.GenesisBlock}}

localwitness = {{.LocalWitness}}

//localwitnesskeystore = [
//  "localwitnesskeystore.json"
//]

block = {
  needSyncCheck = {{.BlockSyncCheck}}
  maintenanceTimeInterval = 21600000
  proposalExpireTime = 259200000 // 3 day: 259200000(ms)
}

// Transaction reference block, default is "head", configure to "solid" can avoid TaPos error
trx.reference.block = "head" // head;solid;

// This property sets the number of milliseconds after the creation of the transaction that is expired, default value is 60000.
// trx.expiration.timeInMilliseconds = 60000

vm = {
  supportConstant = false
  minTimeRatio = 0.0
  maxTimeRatio = 5.0
  saveInternalTx = false
}

committee = {{.Committee}}